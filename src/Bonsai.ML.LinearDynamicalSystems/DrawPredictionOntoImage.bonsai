<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:drw="clr-namespace:Bonsai.Vision.Drawing;assembly=Bonsai.Vision"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="WorkflowInput">
        <Name>Source1</Name>
      </Expression>
      <Expression xsi:type="rx:SelectMany">
        <Name>ImageCreation</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="rx:BehaviorSubject">
              <Name>_Image</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>_Image</Name>
            </Expression>
            <Expression xsi:type="InputMapping">
              <PropertyMappings>
                <Property Name="Size" Selector="Size" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="drw:CreateCanvas">
                <drw:Size>
                  <drw:Width>800</drw:Width>
                  <drw:Height>800</drw:Height>
                </drw:Size>
                <drw:Depth>U8</drw:Depth>
                <drw:Channels>3</drw:Channels>
                <drw:Color>
                  <drw:Val0>0</drw:Val0>
                  <drw:Val1>0</drw:Val1>
                  <drw:Val2>0</drw:Val2>
                  <drw:Val3>0</drw:Val3>
                </drw:Color>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>_Image</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Image" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="drw:AddImage">
                <drw:Destination>
                  <drw:X>0</drw:X>
                  <drw:Y>0</drw:Y>
                  <drw:Width>0</drw:Width>
                  <drw:Height>0</drw:Height>
                </drw:Destination>
                <drw:Interpolation>Linear</drw:Interpolation>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Observation</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Center" Selector="X,Y" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="drw:Circle">
                <drw:Center>
                  <drw:X>607</drw:X>
                  <drw:Y>246</drw:Y>
                </drw:Center>
                <drw:Radius>5</drw:Radius>
                <drw:Color>
                  <drw:Val0>255</drw:Val0>
                  <drw:Val1>0</drw:Val1>
                  <drw:Val2>0</drw:Val2>
                  <drw:Val3>255</drw:Val3>
                </drw:Color>
                <drw:Thickness>1</drw:Thickness>
                <drw:LineType>Connected8</drw:LineType>
                <drw:Shift>0</drw:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Observation</Name>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Script>from System import Array
import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point
import math
output = [[]]
max_i = 1000
@returns(Array[Array[Point]])
def process(value):
  global output, max_i
  if len(output[0]) &gt; max_i:
    output[0].pop(0)
  if not math.isnan(value.X):
    output[0].append(value)
  else:
    if len(output[0]) &gt; 0:
      output[0].append(output[0][-1])
  return Array[Array[Point]]([Array[Point]([Point(val.X, val.Y) for val in output[0]])])</ipy:Script>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Points" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="drw:PolyLine">
                <drw:Closed>false</drw:Closed>
                <drw:Color>
                  <drw:Val0>255</drw:Val0>
                  <drw:Val1>0</drw:Val1>
                  <drw:Val2>0</drw:Val2>
                  <drw:Val3>255</drw:Val3>
                </drw:Color>
                <drw:Thickness>1</drw:Thickness>
                <drw:LineType>Connected8</drw:LineType>
                <drw:Shift>0</drw:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Prediction</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Center" Selector="X,Y" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="drw:Circle">
                <drw:Center>
                  <drw:X>602</drw:X>
                  <drw:Y>244</drw:Y>
                </drw:Center>
                <drw:Radius>5</drw:Radius>
                <drw:Color>
                  <drw:Val0>0</drw:Val0>
                  <drw:Val1>0</drw:Val1>
                  <drw:Val2>255</drw:Val2>
                  <drw:Val3>255</drw:Val3>
                </drw:Color>
                <drw:Thickness>1</drw:Thickness>
                <drw:LineType>Connected8</drw:LineType>
                <drw:Shift>0</drw:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Prediction</Name>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Script>from System import Array
import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import Point
output = [[]]
max_i = 1000
@returns(Array[Array[Point]])
def process(value):
  global output, max_i
  if len(output[0]) &gt; max_i:
    output[0].pop(0)
  output[0].append(value)
  return Array[Array[Point]]([Array[Point]([Point(val.X, val.Y) for val in output[0]])])</ipy:Script>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Points" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="drw:PolyLine">
                <drw:Closed>false</drw:Closed>
                <drw:Color>
                  <drw:Val0>0</drw:Val0>
                  <drw:Val1>0</drw:Val1>
                  <drw:Val2>255</drw:Val2>
                  <drw:Val3>255</drw:Val3>
                </drw:Color>
                <drw:Thickness>1</drw:Thickness>
                <drw:LineType>Connected8</drw:LineType>
                <drw:Shift>0</drw:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Prediction</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Center" Selector="X,Y" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Ellipse</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Angle" Selector="El_a" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Ellipse</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Axes" Selector="El_w,El_h" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="drw:Ellipse">
                <drw:Center>
                  <drw:X>602</drw:X>
                  <drw:Y>244</drw:Y>
                </drw:Center>
                <drw:Axes>
                  <drw:Width>47</drw:Width>
                  <drw:Height>47</drw:Height>
                </drw:Axes>
                <drw:Angle>0</drw:Angle>
                <drw:StartAngle>0</drw:StartAngle>
                <drw:EndAngle>360</drw:EndAngle>
                <drw:Color>
                  <drw:Val0>0</drw:Val0>
                  <drw:Val1>0</drw:Val1>
                  <drw:Val2>255</drw:Val2>
                  <drw:Val3>255</drw:Val3>
                </drw:Color>
                <drw:Thickness>1</drw:Thickness>
                <drw:LineType>AntiAliased</drw:LineType>
                <drw:Shift>0</drw:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="drw:DrawCanvas" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="7" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source2" />
            <Edge From="7" To="10" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source2" />
            <Edge From="10" To="14" Label="Source1" />
            <Edge From="11" To="12" Label="Source1" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="13" To="14" Label="Source2" />
            <Edge From="14" To="17" Label="Source1" />
            <Edge From="15" To="16" Label="Source1" />
            <Edge From="16" To="17" Label="Source2" />
            <Edge From="17" To="21" Label="Source1" />
            <Edge From="18" To="19" Label="Source1" />
            <Edge From="19" To="20" Label="Source1" />
            <Edge From="20" To="21" Label="Source2" />
            <Edge From="21" To="28" Label="Source1" />
            <Edge From="22" To="23" Label="Source1" />
            <Edge From="23" To="28" Label="Source2" />
            <Edge From="24" To="25" Label="Source1" />
            <Edge From="25" To="28" Label="Source3" />
            <Edge From="26" To="27" Label="Source1" />
            <Edge From="27" To="28" Label="Source4" />
            <Edge From="28" To="29" Label="Source1" />
            <Edge From="29" To="30" Label="Source1" />
            <Edge From="30" To="31" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="WorkflowOutput" />
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>